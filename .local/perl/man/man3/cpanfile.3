.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "cpanfile 3"
.TH cpanfile 3 "2014-08-29" "perl v5.20.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
cpanfile \- A format for describing CPAN dependencies for Perl applications
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  requires \*(AqPlack\*(Aq, \*(Aq1.0\*(Aq; # 1.0 or newer
\&  requires \*(AqJSON\*(Aq, \*(Aq>= 2.00, < 2.80\*(Aq;
\&
\&  recommends \*(AqJSON::XS\*(Aq, \*(Aq2.0\*(Aq;
\&  conflicts \*(AqJSON\*(Aq, \*(Aq< 1.0\*(Aq;
\&
\&  on \*(Aqtest\*(Aq => sub {
\&    requires \*(AqTest::More\*(Aq, \*(Aq>= 0.96, < 2.0\*(Aq;
\&    recommends \*(AqTest::TCP\*(Aq, \*(Aq1.12\*(Aq;
\&  };
\&
\&  on \*(Aqdevelop\*(Aq => sub {
\&    recommends \*(AqDevel::NYTProf\*(Aq;
\&  };
\&
\&  feature \*(Aqsqlite\*(Aq, \*(AqSQLite support\*(Aq => sub {
\&    recommends \*(AqDBD::SQLite\*(Aq;
\&  };
.Ve
.SH "VERSION"
.IX Header "VERSION"
This document describes cpanfile format version 1.0.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`cpanfile\*(C'\fR describes \s-1CPAN\s0 dependencies required to execute associated
Perl code.
.SH "SYNTAX"
.IX Header "SYNTAX"
.IP "requires, recommends, suggests, conflicts" 4
.IX Item "requires, recommends, suggests, conflicts"
.Vb 1
\&  requires $module, $version_requirement;
.Ve
.Sp
Describes the requirement for a module. See CPAN::Meta::Spec for
the meanings of each requirement type.
.Sp
When version requirement is omitted, it is assumed that \f(CW0\fR is
passed, meaning any version of the module would satisfy the
requirement.
.Sp
Version requirement can either be a version number or a string that
satisfies \*(L"Version Ranges\*(R" in CPAN::Meta::Spec, such as \f(CW\*(C`>= 1.0, !=
1.1\*(C'\fR.
.Sp
Note that, per CPAN::Meta::Spec, when a plain version number is
given, it means the version \fIor newer\fR is required. If you want a
specific version for a module, use the specific range syntax, i.e.
\&\f(CW\*(C` == 2.1 \*(C'\fR.
.IP "on" 4
.IX Item "on"
.Vb 1
\&  on $phase => sub { ... };
.Ve
.Sp
Describe requirements for a specific phase. Available phases are
\&\f(CW\*(C`configure\*(C'\fR, \f(CW\*(C`build\*(C'\fR, \f(CW\*(C`test\*(C'\fR, \f(CW\*(C`runtime\*(C'\fR and \f(CW\*(C`develop\*(C'\fR.
.IP "feature" 4
.IX Item "feature"
.Vb 1
\&  feature $identifier, $description => sub { ... };
.Ve
.Sp
Group requirements with features. Description can be omitted, when it
is assumed to be the same as identifier. See
\&\*(L"optional_features\*(R" in CPAN::Meta::Spec for more details.
.IP "configure_requires, build_requires, test_requires, author_requires" 4
.IX Item "configure_requires, build_requires, test_requires, author_requires"
.Vb 2
\&  configure_requires $module, $version;
\&  # on \*(Aqconfigure\*(Aq => sub { requires $module, $version }
\&
\&  build_requires $module, $version;
\&  # on \*(Aqbuild\*(Aq => sub { requires $module, $version };
\&
\&  test_requires $module, $version;
\&  # on \*(Aqtest\*(Aq => sub { requires $module, $version };
\&
\&  author_requires $module, $version;
\&  # on \*(Aqdevelop\*(Aq => sub { requires $module, $version };
.Ve
.Sp
Shortcut for \f(CW\*(C`requires\*(C'\fR in specific phase. This is mainly provided
for compatibilities with Module::Install \s-1DSL.\s0
.SH "USAGE"
.IX Header "USAGE"
\&\f(CW\*(C`cpanfile\*(C'\fR is a format to describe dependencies. How to use this file
is dependent on the tools reading/writing it.
.PP
Usually, you're expected to place the \f(CW\*(C`cpanfile\*(C'\fR in the root of the
directory containing the associated code.
.PP
Tools supporting \f(CW\*(C`cpanfile\*(C'\fR format (e.g. cpanm and carton) will
automatically detect the file and install dependencies for the code to
run.
.PP
There are also tools to support converting cpanfile to \s-1CPAN\s0 toolchain
compatible formats, such as Module::CPANfile,
Dist::Zilla::Plugin::Prereqs::FromCPANfile,
Module::Install::CPANfile, so that \f(CW\*(C`cpanfile\*(C'\fR can be used to
describe dependencies for a \s-1CPAN\s0 distribution as well.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tatsuhiko Miyagawa
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
The format (\s-1DSL\s0 syntax) is inspired by Module::Install and
Module::Build::Functions.
.PP
\&\f(CW\*(C`cpanfile\*(C'\fR specification (this document) is based on Ruby's
Gemfile <http://bundler.io/v1.3/man/gemfile.5.html> specification.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
CPAN::Meta::Spec Module::Install Carton
