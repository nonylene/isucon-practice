.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Carton::Doc::Install 3"
.TH Carton::Doc::Install 3 "2014-09-23" "perl v5.20.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Carton::Doc::Install \- Install the dependencies
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  carton install [\-\-deployment] [\-\-cached] [\-\-path=PATH] [\-\-without develop]
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Install the dependencies for your application. This command has two
modes and the behavior is slightly different.
.SS "\s-1DEVELOPMENT MODE\s0"
.IX Subsection "DEVELOPMENT MODE"
.IP "carton install" 4
.IX Item "carton install"
If you run \f(CW\*(C`carton install\*(C'\fR without any arguments and if \fIcpanfile\fR
exists, carton will scan dependencies from \fIcpanfile\fR and install
the modules.
.PP
If you run \f(CW\*(C`carton install\*(C'\fR for the first time
(i.e. \fIcpanfile.snapshot\fR does not exist), carton will fetch all the
modules specified, resolve dependencies and install all required
modules from \s-1CPAN.\s0
.PP
If \fIcpanfile.snapshot\fR file does exist, carton will still try to install
modules specified or updated in \fIcpanfile\fR, but uses \fIcpanfile.snapshot\fR
for the dependency resolution, and then cascades to \s-1CPAN.\s0
.PP
carton will analyze all the dependencies and their version
information, and it is saved into \fIcpanfile.snapshot\fR file. It is important
to add \fIcpanfile.snapshot\fR file into a version controlled repository and
commit the changes as you update your dependencies.
.SS "\s-1DEPLOYMENT MODE\s0"
.IX Subsection "DEPLOYMENT MODE"
If you specify the \f(CW\*(C`\-\-deployment\*(C'\fR command line option or the
\&\fIcpanfile.snapshot\fR exists, carton will only use the dependencies
specified in the \fIcpanfile.snapshot\fR instead of resolving
dependencies.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\-\-deployment" 4
.IX Item "--deployment"
Force the deployment mode. See \*(L"\s-1DEPLOYMENT MODE\*(R"\s0 above.
.IP "\-\-cached" 4
.IX Item "--cached"
Locate distribution tarballs in \f(CW\*(C`vendor/cache\*(C'\fR rather than fetching
them from \s-1CPAN\s0 mirrors. This requires you to run \f(CW\*(C`carton bundle\*(C'\fR
prior to the deployment and commit or sync the content of \f(CW\*(C`vendor\*(C'\fR
directory to the other host you run \f(CW\*(C`carton install\*(C'\fR on.
.IP "\-\-cpanfile" 4
.IX Item "--cpanfile"
Specify the alternate path for cpanfile. By default, \f(CW\*(C`carton install\*(C'\fR
will look for the file \f(CW\*(C`cpanfile\*(C'\fR in the current directory, then
upwards till the root directory, in case the command runs from a sub
directory.
.Sp
Carton assumes the directory where your cpanfile (or altenate path)
exists as a project root directory, and will look for the snapshot file as
well as install directory (\f(CW\*(C`local\*(C'\fR) and \f(CW\*(C`vendor/cache\*(C'\fR relative to it.
.IP "\-\-path" 4
.IX Item "--path"
Specify the path to install modules to. Defaults to \fIlocal\fR in the
directory relative to where \f(CW\*(C`cpanfile\*(C'\fR is.
.Sp
\&\fB\s-1NOTE\s0\fR: this option, as of version 1.0, is not preserved across
multiple runs of \f(CW\*(C`carton install\*(C'\fR or other commands such as \f(CW\*(C`carton
list\*(C'\fR or \f(CW\*(C`carton exec\*(C'\fR. You can choose to set the path in
\&\f(CW\*(C`PERL_CARTON_PATH\*(C'\fR envrionment variable to persist it across
commands.
.IP "\-\-without" 4
.IX Item "--without"
By default, \f(CW\*(C`carton install\*(C'\fR will install all the phases for
dependencies, including \f(CW\*(C`develop\*(C'\fR. You can specify phases or features
to exclude, in the comma separated list.
.Sp
.Vb 1
\&  carton install \-\-deployment \-\-without develop
.Ve
.Sp
\&\fB\s-1NOTE\s0\fR: \f(CW\*(C`\-\-without\*(C'\fR for the initial installation (without
cpanfile.snapshot) is not supported at this moment.
